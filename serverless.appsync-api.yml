name: appsyncmasterclassapi
schema: schema.api.graphql
authentication:
  type: AMAZON_COGNITO_USER_POOLS
  config:
    userPoolId: !Ref CognitoUserPool
    awsRegion: us-east-1
    defaultAction: ALLOW

resolvers:
  Query.getMyProfile:
    kind: UNIT
    dataSource: usersTable
    request: mapping-templates/Query.getMyProfile.request.vtl
    response: mapping-templates/Query.getMyProfile.response.vtl
  Query.getProfile:
    kind: UNIT
    dataSource: usersTable
    request: mapping-templates/Query.getProfile.request.vtl
    response: mapping-templates/Query.getProfile.response.vtl
  Query.getTweets:
    kind: UNIT
    dataSource: tweetsTable
    request: mapping-templates/Query.getTweets.request.vtl
    response: mapping-templates/Query.getTweets.response.vtl
  Query.getMyTimeline:
    kind: UNIT
    dataSource: timelinesTable
    request: mapping-templates/Query.getMyTimeline.request.vtl
    response: mapping-templates/Query.getMyTimeline.response.vtl
  Query.getLikes:
    kind: UNIT
    dataSource: timelinesTable
    request: mapping-templates/Query.getLikes.request.vtl
    response: mapping-templates/Query.getLikes.response.vtl
  Query.getImageUploadUrl:
    kind: UNIT
    dataSource: getImageUploadUrlFunction
  Query.getFollowers:
    kind: PIPELINE
    request: mapping-templates/Query.getFollowers.request.vtl
    response: mapping-templates/Query.getFollowers.response.vtl
    functions:
      - getFollowers
      - hydrateFollowers

  Mutation.editMyProfile:
    kind: UNIT
    dataSource: usersTable
    request: mapping-templates/Mutation.editMyProfile.request.vtl
    response: mapping-templates/Mutation.editMyProfile.response.vtl
  Mutation.like:
    kind: UNIT
    dataSource: likeMutation
    request: mapping-templates/Mutation.like.request.vtl
    response: mapping-templates/Mutation.like.response.vtl
  Mutation.unlike:
    kind: UNIT
    dataSource: unlikeMutation
    request: mapping-templates/Mutation.unlike.request.vtl
    response: mapping-templates/Mutation.unlike.response.vtl
  Mutation.follow:
    kind: UNIT
    dataSource: followMutation
    request: mapping-templates/Mutation.follow.request.vtl
    response: mapping-templates/Mutation.follow.response.vtl
  Mutation.unfollow:
    kind: UNIT
    dataSource: unfollowMutation
    request: mapping-templates/Mutation.unfollow.request.vtl
    response: mapping-templates/Mutation.unfollow.response.vtl
  Mutation.tweet:
    kind: UNIT
    dataSource: tweetFunction
  Mutation.retweet:
    kind: UNIT
    dataSource: retweetFunction
  Mutation.unretweet:
    kind: UNIT
    dataSource: unretweetFunction
  Mutation.reply:
    kind: UNIT
    dataSource: replyFunction

  # NESTED RESOLVER
  Tweet.profile:
    kind: UNIT
    request: mapping-templates/Tweet.profile.request.vtl
    response: mapping-templates/Tweet.profile.response.vtl
    dataSource: usersTable
  Reply.profile:
    kind: UNIT
    request: mapping-templates/Tweet.profile.request.vtl
    response: mapping-templates/Tweet.profile.response.vtl
    dataSource: usersTable
  Tweet.retweeted:
    kind: UNIT
    request: mapping-templates/Tweet.retweeted.request.vtl
    response: mapping-templates/Tweet.retweeted.response.vtl
    dataSource: retweetsTable
  Reply.retweeted:
    kind: UNIT
    request: mapping-templates/Tweet.retweeted.request.vtl
    response: mapping-templates/Tweet.retweeted.response.vtl
    dataSource: retweetsTable
  Retweet.profile:
    kind: UNIT
    request: mapping-templates/Tweet.profile.request.vtl
    response: mapping-templates/Tweet.profile.response.vtl
    dataSource: usersTable
  Tweet.liked:
    kind: UNIT
    request: mapping-templates/Tweet.liked.request.vtl
    response: mapping-templates/Tweet.liked.response.vtl
    dataSource: likesTable
  Reply.liked:
    kind: UNIT
    request: mapping-templates/Tweet.liked.request.vtl
    response: mapping-templates/Tweet.liked.response.vtl
    dataSource: likesTable
  Retweet.retweetOf:
    kind: UNIT
    request: mapping-templates/ReTweet.retweetOf.request.vtl
    response: mapping-templates/ReTweet.retweetOf.response.vtl
    dataSource: tweetsTable
  Reply.inReplyToTweet:
    kind: UNIT
    request: mapping-templates/Reply.inReplyToTweet.request.vtl
    response: mapping-templates/Reply.inReplyToTweet.response.vtl
    dataSource: tweetsTable
  Reply.inReplyToUsers:
    kind: UNIT
    request: mapping-templates/Reply.inReplyToUsers.request.vtl
    response: mapping-templates/Reply.inReplyToUsers.response.vtl
    dataSource: usersTable
  UnhydratedTweetsPage.tweets:
    kind: UNIT
    request: mapping-templates/UnhydratedTweetsPage.tweets.request.vtl
    response: mapping-templates/UnhydratedTweetsPage.tweets.response.vtl
    dataSource: tweetsTable
  MyProfile.tweets:
    kind: UNIT
    request: mapping-templates/MyProfile.tweets.request.vtl
    response: mapping-templates/MyProfile.tweets.response.vtl
    dataSource: tweetsTable
  OtherProfile.tweets:
    kind: UNIT
    request: mapping-templates/MyProfile.tweets.request.vtl
    response: mapping-templates/MyProfile.tweets.response.vtl
    dataSource: tweetsTable
  OtherProfile.following:
    kind: UNIT
    request: mapping-templates/OtherProfile.following.request.vtl
    response: mapping-templates/OtherProfile.following.response.vtl
    dataSource: relationshipsTable
  OtherProfile.followedBy:
    kind: UNIT
    request: mapping-templates/OtherProfile.followedBy.request.vtl
    response: mapping-templates/OtherProfile.followedBy.response.vtl
    dataSource: relationshipsTable

pipelineFunctions:
  getFollowers:
    dataSource: relationshipsTable
    request: mapping-templates/getFollowers.request.vtl
    response: mapping-templates/getFollowers.response.vtl
  hydrateFollowers:
    dataSource: usersTable
    request: mapping-templates/hydrateFollowers.request.vtl
    response: mapping-templates/hydrateFollowers.response.vtl

dataSources:
  usersTable:
    type: AMAZON_DYNAMODB
    description: "Users table"
    config:
      tableName: !Ref UsersTable
  tweetsTable:
    type: AMAZON_DYNAMODB
    description: "Tweets table"
    config:
      tableName: !Ref TweetsTable
  likesTable:
    type: AMAZON_DYNAMODB
    description: "Likes table"
    config:
      tableName: !Ref LikesTable
  retweetsTable:
    type: AMAZON_DYNAMODB
    description: "Retweets table"
    config:
      tableName: !Ref RetweetsTable
  likeMutation:
    type: AMAZON_DYNAMODB
    description: "Like Mutation"
    config:
      tableName: !Ref LikesTable
      iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: !GetAtt LikesTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !GetAtt TweetsTable.Arn
  unlikeMutation:
    type: AMAZON_DYNAMODB
    description: "Like Mutation"
    config:
      tableName: !Ref LikesTable
      iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
          Resource: !GetAtt LikesTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !GetAtt TweetsTable.Arn
  followMutation:
    type: AMAZON_DYNAMODB
    description: "Follow Mutation"
    config:
      tableName: !Ref RelationshipsTable
      iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: !GetAtt RelationshipsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: !GetAtt UsersTable.Arn
  unfollowMutation:
    type: AMAZON_DYNAMODB
    description: "Unfollow Mutation"
    config:
      tableName: !Ref RelationshipsTable
      iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
          Resource: !GetAtt RelationshipsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: !GetAtt UsersTable.Arn
  timelinesTable:
    type: AMAZON_DYNAMODB
    description: "Timelines table"
    config:
      tableName: !Ref TimelinesTable
  relationshipsTable:
    type: AMAZON_DYNAMODB
    description: "Relationships table"
    config:
      tableName: !Ref RelationshipsTable

  getImageUploadUrlFunction:
    type: AWS_LAMBDA
    config:
      functionName: getImageUploadUrl

  tweetFunction:
    type: AWS_LAMBDA
    config:
      functionName: tweet
  retweetFunction:
    type: AWS_LAMBDA
    config:
      functionName: retweet
  unretweetFunction:
    type: AWS_LAMBDA
    config:
      functionName: unretweet
  replyFunction:
    type: AWS_LAMBDA
    config:
      functionName: reply

substitutions: #global substitutions
  TweetsTable: !Ref TweetsTable
  UsersTable: !Ref UsersTable
  LikesTable: !Ref LikesTable
  RelationshipsTable: !Ref RelationshipsTable
